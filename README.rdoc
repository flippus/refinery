= Generate your first Refinery CMS Plugin

== Create the engine and your first model

To create the engine and your first model you have to type in the following command:

  $> rails generate refinery:engine singular_model_name (attribute:attribut_type)*x --namespace your_plugin_namespace_name

Then follow the instructions!

If you want to create a model without frontend, then add +--skip-frontend+.

=== Example:

I want to create an engine called +event+ with the following attributes known from rails and the namespace calendar.

  $> rails generate refinery:engine event name:string room:string date:datetime host_name:string host_email:string contact_email:string comment:text admission:decimal link:string published:boolean --namespace calendar

== Create more models

If you need another models, you have to use the generate command again.
But now you have to change the command a little bit, so that you have the following new command:

  $> rails generate refinery:engine singular_model_name (attribute:attribut_type)*x --extension plural_name_of_your_first_model --namespace your_plugin_namespace_name

+ follow the instructions!

=== Example:

I want to create a location model for my events engine.

  $> rails generate refinery:engine location name:string --extension events --namespace calendar

I want to create now a category model for my engine. As you will see, it's the same as the location model creation.

  $> rails generate refinery:engine category name:string --extension events --namespace calendar

There is also an other {official guide}[http://refinerycms.com/guides/multiple-resources-in-an-extension] for this topic.

== revise your models/views

Now you can change the models/views as you want. You can use the most things as in rails, e.g. the relationships has_many, belongs_to and so on.

But pay attention to the refinery way, not the rails way.

Example:

We have an event model and a location model.
A location can have many events, but an event belongs to a location.
Here you see the differences between rails and refinery code:

=== Rails

event.rb:
  belongs_to :location

location.rb:
  has_many :events, dependent: :restrict


=== Refinery

event.rb:
  belongs_to :location, :class_name => '::Refinery::Calendar::Location'

location.rb:
  has_many :events, :class_name => 'Refinery::Calendar::Event', dependent: :restrict

As you can see, you have to use always the refinery model!!


== Use a own javascript file

The easiest way to include an own javascript file to views is to add the following code to these views.
You needn't to add js at the end of the file, this happens automatically.
But the js file has to be located in +your_app_directory/app/assets/javascripts+.

  <% content_for :javascripts do %>
    <%= javascript_include_tag 'javascript_file_name' %>
  <% end %>


== Add a js file for backend

If you want to add a js file only for the backend of your app, you can also register the file in +refinery_directory/config/initializers/core.rb+ with the following command:

  config.register_javascript "your_app_name"

The js file has to be located in +your_app_directory/app/assets/javascripts+ and has to called +your_app_name.js+.

=== Example:

In my case I have to use the following code:

  config.register_javascript "events"

My js file is located in +events/app/assets/javascripts+ and it's name is +events.js+.

== Form generator

In addition to the engine generator there's also a form generator. So can create easily additional forms to your extension.
To use the form generator you need this command:

  rails generate refinery:form form_name (attribute:attribut_type)*x --extension extension_name --namespace namespace_name

If you want to see some information, just invoke
  rails generate refinery:form

=== generated form

If you created your first form, you will be surprised maybe, because the labels are +f.required_label+ s and not +f.label+ s.
A +f.required_label+ means, that in front of the label a * will be shown, so the visitor knows, he has to fill in the field.

== controller update

=== frontend controller

If you want another order of your objects, you have to edit your frontend controller.

There's a method +find_all_objects+, in my case +find_all_events+.

  def find_all_events
    @events = Event.order("date DESC")
  end

I advise to change the +show+ method to the following, so you have a redirecting to the index path of the event, if the id doesn't exist.

 def show

   begin
    @event = Event.find(params[:id])
   rescue ActiveRecord::RecordNotFound
    flash[:error] = "Event konnte nicht gefunden werden"
    redirect_to refinery.calendar_events_path
   end

   present(@page)
 end

=== add a frontend view

To add a frontend view you have to change the +config/routes.rb+, add the +view+ and add the controller method.

The controller methods for new and create are similar to rails and look like my following methods:

 def new
   @event = Event.new
 end

 def create
   @event = Event.new(params[:event])

   if @event.save
     flash[:notice] = "Event wurde erfolgreich angelegt"
     redirect_to refinery.calendar_events_path
   else
     render :action => 'new'
   end
 end

=== admin controller

It's the same in your admin controller, but you can disable there the manual sorting.

This line determine the order type of the objects.
  :order => "date DESC"

This line determine, if you can manually change the position of a object.
  :sortable => false

=== add an admin view

If you want to add/edit views, then you have to edit the crudify only, if you want to change something in create, update or destroy.
But if you want to add a show view e.g., you can add as in rails a show method and write in the code.

But don't forget, there's a +find_object+ method in every controller, which you have to override maybe.

The standart method in my event admin controller is the following, e.g.:

  def find_event
    @event = Event.find(params[:id])
  end

I advise to change the +find_event+ method to the following, so you have a redirecting to the index path of the event, if the id does not exist.

  def find_event
    begin
      @event = Event.find(params[:id])
    rescue ActiveRecord::RecordNotFound
      flash[:error] = "Event konnte nicht gefunden werden"
      redirect_to refinery.calendar_admin_events_path
    end
  end

At least, if you want to add a admin view, you have to change the +config/routes.rb+, add the +view+ and add/change the controller method.

== Create a gem from your plugin

  $> cd vendor/extensions/events
  $> gem build refinerycms-events.gemspec
  $> gem install refinerycms-events.gem

Sign up for a link:http://rubygems.org/ account and publish the gem

  $> gem push refinerycms-events.gem