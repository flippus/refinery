= Generate your first Refinery CMS Plugin

== Create the engine and your first model

To create the engine and your first model you have to type in the following command:

  $> rails generate refinery:engine singular_model_name (attribute:attribut_type)*x --namespace your_plugin_namespace_name

Then follow the instructions!

If you want to create a model without frontend, then add +--skip-frontend+.

=== Example:

I want to create a engine with the name +event+ with the following attributes known from rails and the namespace calendar.

  $> rails generate refinery:engine event name:string room:string date:datetime host_name:string host_email:string contact_email:string comment:text admission:decimal link:string published:boolean --namespace calendar

== Create more models

If you need some more models, you use the generate command some more times.
But now you have to change the command a little bit, so that you have the following new command:

  $> rails generate refinery:engine singular_model_name (attribute:attribut_type)*x --extension plural_name_of_your_first_model --namespace your_plugin_namespace_name

+ follow the instructions!

=== Example:

I want to create a location model for my events engine.

  $> rails generate refinery:engine location name:string --extension events --namespace calendar

Next model i want to create is the category model for my engine and you see, it's the same as the location model creation.

  $> rails generate refinery:engine category name:string --extension events --namespace calendar

There is also a {official guide}[http://refinerycms.com/guides/multiple-resources-in-an-extension] for this topic.

== revise your models/views

And now you can change the models/views as you want. You can use the most things as in rails, e.g. the relationships has_many and belongs_to and so on.

But pay attention to the refinery way, not the rails way.

I give you a example:

We have a event model and a location model.
A location can have many events, but a event belongs to a location.
Now you see the differences between rails and refinery code:

=== Rails

event.rb:
  belongs_to :location

location.rb:
  has_many :events, dependent: :restrict


=== Refinery

event.rb:
  belongs_to :location, :class_name => '::Refinery::Calendar::Location'

location.rb:
  has_many :events, :class_name => 'Refinery::Calendar::Event', dependent: :restrict

As you can see, you have to use always the refinery model!!


== Add a js file for backend

If you want to add a js file for your app, you have to register the file in +refinery_directory/config/initializers/core.rb+ with the following command:

  $> config.register_javascript "your_app_name"

The js file have to be located in +your_app_directory/app/assets/javascripts+ and has to be named as +your_app_name.js+.

=== Example:

In my case I have to use the following code:

  $> config.register_javascript "events"

My js file is located in +events/app/assets/javascripts+ and it's name is +events.js+.


== Create a gem from your plugin

  $> cd vendor/extensions/events
  $> gem build refinerycms-events.gemspec
  $> gem install refinerycms-events.gem

Sign up for a link:http://rubygems.org/ account and publish the gem

  $> gem push refinerycms-events.gem